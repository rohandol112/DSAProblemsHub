The Bellman-Ford algorithm is a shortest-path algorithm used to find the shortest distance between a source vertex
and all other vertices in a weighted directed graph. It can handle graphs with negative weight edges and detect the
 presence of negative-weight cycles. 
 
 Here's a short explanation of how it works:

1. Initialization:
   - Assign an initial distance value of 0 to the source vertex and infinity to all other vertices.

2. Relaxation (Iterative):
   - Repeat the following process V-1 times (where V is the number of vertices in the graph):
    - For each edge (u, v) in the graph, if the distance to vertex u plus the weight of the edge (u, v) is less than the 
     current distance to vertex v, update the distance to vertex v with this smaller value.
   
3. Negative Cycle Detection:
   - After the V-1 iterations, if there is any further improvement in distance values, then it indicates the presence of a 
   negative-weight cycle in the graph.

4. Output:
   - The final distance values after V-1 iterations represent the shortest distances from the source vertex to all other vertices
    in the graph.

The key idea is to iteratively relax edges by considering all possible paths from the source vertex to other vertices and
 updating their distances if a shorter path is found. By repeating this process for V-1 iterations, Bellman-Ford guarantees that 
 it finds the shortest paths even in the presence of negative-weight edges, as long as there are no negative-weight cycles reachable
from the source vertex. If a negative-weight cycle exists, the algorithm can detect it during the final step.